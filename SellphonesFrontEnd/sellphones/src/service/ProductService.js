import AxiosClient from "../api/AxiosClient";

const ProductService = {
  async getFeaturedProductsByCategoryName(categoryName) {
    try {
      // Encode ƒë·ªÉ tr√°nh l·ªói khi category c√≥ d·∫•u ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát
      const encodedCategory = encodeURIComponent(categoryName);

      const res = await AxiosClient.get(`/products/featured-products/${encodedCategory}`);
      const products = res?.data?.result ?? [];

      // üëâ C√≥ th·ªÉ transform th√™m n·∫øu c·∫ßn
      return products;
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m n·ªïi b·∫≠t cho danh m·ª•c "${categoryName}":`, error);
      return [];
    }
  },

  async getProductById(id) {
    try {

      const res = await AxiosClient.get(`/products/${id}`);
      const product = res?.data?.result ?? null;

      // üëâ C√≥ th·ªÉ transform th√™m n·∫øu c·∫ßn
      return product;
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m  "${id}":`, error);
      return null;
    }
  },

  async getProductVariantById(id) {
    try {

      const res = await AxiosClient.get(`/products/product-variants/${id}`);
      const productVariant = res?.data?.result ?? null;

      // üëâ C√≥ th·ªÉ transform th√™m n·∫øu c·∫ßn
      return productVariant;
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫£i phi√™n b·∫£n s·∫£n ph·∫©m "${id}":`, error);
      return null;
    }
  },

  async getSimilarProducts(id) {
    try {

      const res = await AxiosClient.get(`/products/${id}/similar-products`);
      const similarProducts = res?.data?.result ?? null;

      // üëâ C√≥ th·ªÉ transform th√™m n·∫øu c·∫ßn
      return similarProducts;
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m t∆∞∆°ng t·ª± "${id}":`, error);
      return null;
    }
  },

  async getProductsByFilters(selectedOptions, staticParams, page = 0, size = 5, sort = "desc") {
    try {
      // üîπ B∆∞·ªõc 1: Chuy·ªÉn selectedOptions ‚Üí dynamicFilters
      const dynamicFilters = {};

      Object.entries(selectedOptions).forEach(([groupName, option]) => {
        const groupId = option.groupId;
        const condition = option.condition;

        if (groupName === "Gi√°" && condition.includes("-")) {
          const [min, max] = condition.split("-");
          dynamicFilters["price"] = `${min}-${max}`;
        } else {
          dynamicFilters[groupId] = condition;
        }
      });

      // üîπ B∆∞·ªõc 2: Format body request
      const filterRequest = {
        query: {
          _static: {
            categoryName: staticParams.categoryName,
            brandId: staticParams.brandId || null,
            priceRange: staticParams.priceRange || null,
          },
          dynamic: dynamicFilters,
        },
        page,
        size,
        sort,
      };

      // üîπ B∆∞·ªõc 3: G·ª≠i request ƒë·∫øn API
      const res = await AxiosClient.post("/products/query", filterRequest);
      const data = res?.data?.products ?? {};

      return {
        products: data.result ?? [],
        totalPages: data.totalPages ?? 1,
      };
    } catch (error) {
      console.error("‚ùå L·ªói khi l·ªçc s·∫£n ph·∫©m:", error);
      return {
        products: [],
        totalPages: 1,
      };
    }
  },
};

export default ProductService;
